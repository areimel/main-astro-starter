---
/*========================================*/
/*	PAGE: Home/Index
		NOTES:	
*/
/*========================================*/

//Essential Components
import Layout from '@layouts/Layout.astro';

//Content Components
//import MasterComponent from '@components/MasterComponent.astro';
import LinkCard from '@components/contentComponents/LinkCard.astro';
// SplitLayout from '@components/contentLayouts/SplitLayout.astro';
import FooterNotice from '@components/contentComponents/FooterNotice.astro';
import SiteQRCodeLink from '@components/contentComponents/SiteQRCodeLink.astro';
//import DisplayBits from '@components/DisplayBits.astro';

//Site Data
const siteData = await import("src/data/siteData.json");
---

<Layout 
	title={siteData.projectName}
	heading={siteData.projectName}
>
	<section>
		<h1>Scan from WebCam:</h1>
		<div id="video-container">
			<video id="qr-video"></video>
		</div>
		<div>
			<label>
				Highlight Style
				<select id="scan-region-highlight-style-select">
					<option value="default-style">Default style</option>
					<option value="example-style-1">Example custom style 1</option>
					<option value="example-style-2">Example custom style 2</option>
				</select>
			</label>
			<label>
				<input id="show-scan-region" type="checkbox">
				Show scan region canvas
			</label>
		</div>
		<div>
			<select id="inversion-mode-select">
				<option value="original">Scan original (dark QR code on bright background)</option>
				<option value="invert">Scan with inverted colors (bright QR code on dark background)</option>
				<option value="both">Scan both</option>
			</select>
			<br>
		</div>
		<b>Device has camera: </b>
		<span id="cam-has-camera"></span>
		<br>
		<div>
			<b>Preferred camera:</b>
			<select id="cam-list">
				<option value="environment" selected>Environment Facing (default)</option>
				<option value="user">User Facing</option>
			</select>
		</div>
		<b>Camera has flash: </b>
		<span id="cam-has-flash"></span>
		<div>
			<button id="flash-toggle">ðŸ“¸ Flash: <span id="flash-state">off</span></button>
		</div>
		<br>
		<b>Detected QR code: </b>
		<span id="cam-qr-result">None</span>
		<br>
		<b>Last detected at: </b>
		<span id="cam-qr-result-timestamp"></span>
		<br>
		<button id="start-button">Start</button>
		<button id="stop-button">Stop</button>
		<hr>

		<h1>Scan from File:</h1>
		<input type="file" id="file-selector">
		<b>Detected QR code: </b>
		<span id="file-qr-result">None</span>
	</section>

	<FooterNotice/>
</Layout>

<script>
	import QrScanner from 'qr-scanner';

	const video = document.getElementById('qr-video') as HTMLVideoElement;
	const camQrResult = document.getElementById('cam-qr-result') as HTMLSpanElement;
	const camQrResultTimestamp = document.getElementById('cam-qr-result-timestamp') as HTMLSpanElement;
	const fileQrResult = document.getElementById('file-qr-result') as HTMLSpanElement;
	const fileSelector = document.getElementById('file-selector') as HTMLInputElement;

	function setResult(label: HTMLSpanElement, result: QrScanner.ScanResult) {
		console.log(result.data);
		label.textContent = result.data;
		camQrResultTimestamp.textContent = new Date().toString();
		label.style.color = 'teal';
		//clearTimeout(label.highlightTimeout);
		//label.highlightTimeout = setTimeout(() => label.style.color = 'inherit', 100);
	}

	const qrScanner = new QrScanner(
		video,
		result => setResult(camQrResult, result),
		{
			returnDetailedScanResult: true,
			highlightScanRegion: true,
			highlightCodeOutline: true,
		}
	);

	qrScanner.start().then(() => {
		qrScanner.hasFlash().then(hasFlash => {
			const camHasFlash = document.getElementById('cam-has-flash');
			if (camHasFlash) camHasFlash.textContent = hasFlash.toString();
			const flashToggle = document.getElementById('flash-toggle');
			if (flashToggle) flashToggle.style.display = hasFlash ? 'inline-block' : 'none';
		});
	});

	QrScanner.hasCamera().then(hasCamera => {
		const camHasCamera = document.getElementById('cam-has-camera');
		if (camHasCamera) camHasCamera.textContent = hasCamera.toString();
	});

	fileSelector.addEventListener('change', event => {
		const target = event.target as HTMLInputElement;
		const file = target.files?.[0];
		if (!file) {
			return;
		}
		QrScanner.scanImage(file, { returnDetailedScanResult: true })
			.then(result => setResult(fileQrResult, result))
			.catch(e => setResult(fileQrResult, { data: e.toString() || 'No QR code found.' } as QrScanner.ScanResult));
	});

	const startButton = document.getElementById('start-button');
	if (startButton) startButton.addEventListener('click', () => qrScanner.start());

	const stopButton = document.getElementById('stop-button');
	if (stopButton) stopButton.addEventListener('click', () => qrScanner.stop());

	const flashToggle = document.getElementById('flash-toggle');
	if (flashToggle) {
		flashToggle.addEventListener('click', () => {
			qrScanner.toggleFlash().then(() => {
				const flashState = document.getElementById('flash-state');
				if (flashState) flashState.textContent = qrScanner.isFlashOn() ? 'on' : 'off';
			});
		});
	}

	// ... rest of your existing script code ...
</script>

<style>
	div {
		margin-bottom: 16px;
	}

	#video-container {
		line-height: 0;
	}

	#video-container.example-style-1 .scan-region-highlight-svg,
	#video-container.example-style-1 .code-outline-highlight {
		stroke: #64a2f3 !important;
	}

	#video-container.example-style-2 {
		position: relative;
		width: max-content;
		height: max-content;
		overflow: hidden;
	}
	#video-container.example-style-2 .scan-region-highlight {
		border-radius: 30px;
		outline: rgba(0, 0, 0, .25) solid 50vmax;
	}
	#video-container.example-style-2 .scan-region-highlight-svg {
		display: none;
	}
	#video-container.example-style-2 .code-outline-highlight {
		stroke: rgba(255, 255, 255, .5) !important;
		stroke-width: 15 !important;
		stroke-dasharray: none !important;
	}

	#flash-toggle {
		display: none;
	}

	hr {
		margin-top: 32px;
	}
	input[type="file"] {
		display: block;
		margin-bottom: 16px;
	}
</style>